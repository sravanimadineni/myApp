pipeline {
    agent any

    environment {
        AWS_REGION = 'us-east-1'
        AWS_ACCOUNT_ID = '412381746142'
        ECR_REPO = 'myapp-ecr-repo'
        IMAGE_NAME = 'myapp-user-service'
        CONTAINER_PORT = '8081'
        TF_DIR = 'terraform'  // Ensure this is correct inside the repo
    }

    stages {
        stage('Checkout Code') {
            steps {
                git branch: 'main', url: 'https://github.com/sravanimadineni/myApp.git'
            }
        }

        stage('Terraform Init & Apply') {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'AWS_CREDENTIALS']]) {
                    script {
                        def terraformDir = "${WORKSPACE}\\${TF_DIR}".replace('\\', '/')

                        sh """
                            docker run --rm -v ${terraformDir}:/workspace -w /workspace hashicorp/terraform:latest terraform init
                            docker run --rm -v ${terraformDir}:/workspace -w /workspace hashicorp/terraform:latest terraform apply -auto-approve
                        """
                    }
                }
            }
        }

        stage('Docker Build & Push to AWS ECR') {
            steps {
                script {
                    def awsRegion = env.AWS_REGION
                    def ecrRepo = env.ECR_REPO
                    def imageName = env.IMAGE_NAME
                    def awsAccountId = env.AWS_ACCOUNT_ID

                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'AWS_CREDENTIALS']]) {
                        powershell """
                            aws ecr get-login-password --region ${awsRegion} | docker login --username AWS --password-stdin ${awsAccountId}.dkr.ecr.${awsRegion}.amazonaws.com
                            docker build -t ${imageName} user-service/.
                            docker tag ${imageName}:latest ${awsAccountId}.dkr.ecr.${awsRegion}.amazonaws.com/${ecrRepo}:latest
                            docker push ${awsAccountId}.dkr.ecr.${awsRegion}.amazonaws.com/${ecrRepo}:latest
                        """
                    }
                }
            }
        }

        stage('Deploy to AWS EC2') {
            steps {
                withCredentials([sshUserPrivateKey(credentialsId: 'EC2_SSH_CREDENTIALS', keyFileVariable: 'SSH_KEY')]) {
                    script {
                        powershell """
                            ssh -o StrictHostKeyChecking=no -i \${SSH_KEY} ec2-user@<EC2_INSTANCE_IP> "docker pull ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO}:latest && docker run -d -p ${CONTAINER_PORT}:${CONTAINER_PORT} --name ${IMAGE_NAME} ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO}:latest"
                        """
                    }
                }
            }
        }
    }
}
